#!/usr/bin/env python

import sys
import json
import matplotlib.pyplot as plt
import matplotlib as mlt
from mpl_toolkits.basemap import Basemap
from PIL import Image
from pylab import rcParams
from utils import *



class Visualizer(object):

    def __init__(self, parsed_cifp_filename,lon_lb=0,lat_lb=0,lon_ub=1,lat_ub=1):

        with open(parsed_cifp_filename) as parsed_cifp:
            self.cifp = json.load(parsed_cifp)

        self.plan = None
        self.basemap = None
        


    def visualize_plan(self,plan,lat_0,lon_0,width,height,resolution='h'):


        self.draw_map(lat_0,lon_0,width,height,resolution=resolution)


        self.draw_SID(airport='KBOS',SID_id='BLZZR4', transition_id='RW04R')


        
        # plt.savefig("aa.png", dpi=300)
        plt.show()
        


    def draw_SID(self,airport, SID_id, transition_id):

        procedure = self.cifp['Airport'][airport]['SID'][SID_id][transition_id]['Procedure']


        lat = []
        lon = []
        
        for step in procedure:
            wp_name = step['FIX']
            mag_crs = step['MAG CRS']
            path_term = step['PATH TERM']

            wp_coord = self.get_wp_coord(airport, wp_name)
            lat.append(wp_coord[0])
            lon.append(wp_coord[1])


        self.basemap.scatter(lon, lat, latlon=True, c=1, s=area,
                             cmap='Reds', alpha=0.5)



    def draw_STAR(self):
        aa = 1


    def draw_map(self,lat_0,lon_0,width,height,resolution='h'):

        self.basemap = Basemap(projection='lcc', resolution=resolution, 
                               lat_0=lat_0, lon_0=lon_0,
                               width=width, height=height)

        self.basemap.shadedrelief()
        self.basemap.drawcoastlines(color='gray')
        self.basemap.drawcountries(color='gray')
        self.basemap.drawstates(color='gray')



    def get_wp_coord(self,airport,wp_name):

        if wp_name==airport:
            lat_str = self.cifp['Airport'][airport]['LATITUDE']
            lon_str = self.cifp['Airport'][airport]['LONGITUDE']

        elif wp_name in self.cifp['Airport'][airport]['Terminal Waypoints']:
            lat_str = self.cifp['Airport'][airport]['Terminal Waypoints'][wp_name]['LATITUDE']
            lon_str = self.cifp['Airport'][airport]['Terminal Waypoints'][wp_name]['LONGITUDE']

        else:
            raise ValueError("Waypoint not found.")
            
            
        lat = float(lat_str[1:3]) + float(lat_str[3:]) / (10**len(str(int(lat_str[3:]))))
        lat_dir = lat_str[0]

        if lat_dir=="S":
            lat = -lat
        
        
        lon = float(lon_str[1:4]) + float(lon_str[4:]) / (10**len(str(int(lon_str[4:]))))
        lon_dir = lon_str[0]
        
        if lon_dir=="W":
            lon = -lon

        
        return [lat,lon]
